version: '2.1'
# License Service docker configuration
services:
  database:
    image: postgres:latest
    ports:
      - "127.0.0.1:5432:5432"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "microservice"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/1-init.sql
      - ./data.sql:/docker-entrypoint-initdb.d/2-data.sql
    networks:
      backend:
        aliases:
          - "database"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
  configuration-service:
    image: javatechnology/configuration-service:0.0.1-SNAPSHOT
#    build:
#      dockerfile: ConfigurationService/Dockerfile
    ports:
      - "8888:8888"
    networks:
      backend:
        aliases:
          - "configuration-service"
  eureka-server:
    image: javatechnology/eureka-service:0.0.1-SNAPSHOT
    ports:
      - "8761:8761"

  licensing-service:
    image: javatechnology/licensing-service:0.0.1-SNAPSHOT
    ports:
      - "8080:8080"

    environment:
      PROFILE: "dev"
      SPRING_CONFIG_IMPORT: "optional:configserver:http://configuration-service:8888"
      SERVER_PORT: "8080"
      CONFIGSERVER_PORT: "8888"
      DATABASESERVER_PORT: "5432"
    depends_on:
      configuration-service:
        condition: service_started
      database:
        condition: service_healthy
    networks:
      - backend

  organization-service:
    image: javatechnology/organization-service:0.0.1-SNAPSHOT
    ports:
      - "9090:9090"
    environment:
      PROFILE: "dev"
      SPRING_CONFIG_IMPORT: "optional:configserver:http://configuration-service:8888"
    depends_on:
      configuration-service:
        condition: service_started
      database:
        condition: service_healthy
    networks:
      - backend

networks:
  backend:
    driver: bridge

